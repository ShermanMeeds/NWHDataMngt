using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Data;
using System.Data.SqlClient;

namespace DataLayer.Framework
{
  /// <summary>
  /// Generates a table schema from a business object based on the defined TableAttribute
  /// and ColumnAttribute attributes.  The schema for a particular object only needs to
  /// be generated once, so normally the result is saved in a static variable in the object.
  /// </summary>
  /// <typeparam name="T">The object to create the schema for.</typeparam>
  public class TableSchema<T> : ITableSchema
  {
    private TableAttribute _table = null;
    private string _versioncolumn = null;
    private string _identitycolumn = null;
    private Dictionary<string, ColumnAttribute> _cols = null;
    private Dictionary<string, ColumnAttribute> _keys = null;
    private bool _isAnyDBGenerated = false;

    #region Properties

    /// <summary>
    /// Gets whether the values for any columns in this object are generated by the database.
    /// </summary>
    /// <value>True if any columns are generated by the database; otherwise false.</value>
    /// <remarks>The CRUD commands use this property to optimize command creation when no
    /// values need to be returned.</remarks>
    public bool IsAnyDBGenerated { get { return _isAnyDBGenerated; } }

    /// <summary>
    /// Gets a dictionary of column attributes containing all defined columns.
    /// </summary>
    /// <value>A dictionary of all defined columns.</value>
    public Dictionary<string, ColumnAttribute> Cols { get { return _cols; } }

    /// <summary>
    /// Gets a dictionary of column attributes containing just the primary key
    /// columns.
    /// </summary>
    /// <value>A dictionary of primary key columns.</value>
    public Dictionary<string, ColumnAttribute> Keys { get { return _keys; } }

    /// <summary>
    /// Gets the column attributes for the version(timestamp) column.
    /// </summary>
    /// <value>The column attributes for the version column, or null if no
    /// version column is defined.</value>
    public ColumnAttribute VersionColumn
    {
      get
      {
        if (_versioncolumn == null) { return null; }
        return _cols[_versioncolumn];
      }
    }

    /// <summary>
    /// Gets the column attributes for the identity column.
    /// </summary>
    /// <value>The column attributes for the identity column, or null if no
    /// identity column is defined.</value>
    public ColumnAttribute IdentityColumn
    {
      get
      {
        if (_identitycolumn == null) { return null; }
        return _cols[_identitycolumn];
      }
    }

    /// <summary>
    /// Gets the name of the table that this schema is mapped to.
    /// </summary>
    /// <value>The name of the table that this schema is mapped to.</value>
    public string TableName { get { return _table.Name; } }

    #endregion

    #region Static Constructor

    /// <summary>
    /// Examines the designated object type using reflections, extracts any defined
    /// TableAttribute and ColumnAttribute attributes, and builds a new
    /// TableSchema object that represents the database mappings for the type.
    /// </summary>
    /// <returns>The table schema defined for the designated object type.</returns>
    /// <remarks>This schema is used to generate standard Select and CRUD (Create,
    /// Update and Delete) commands and to rollback changes when an edit is
    /// aborted.</remarks>
    public static TableSchema<T> GetSchema()
    {
      TableSchema<T> schema = new TableSchema<T>();

      // use reflection to extract custom attributes from designated type
      System.Reflection.MemberInfo inf = typeof(T);

      // Get Table attribute
      object[] tableattributes;
      tableattributes = inf.GetCustomAttributes(typeof(Framework.TableAttribute), false);
      if (tableattributes.Length != 1)
      { throw new Exception("Unable to get schema for business object, missing Table attribute."); }
      schema._table = (TableAttribute)tableattributes[0];

      // Get Column attributes
      schema._cols = new Dictionary<string, ColumnAttribute>();
      schema._keys = new Dictionary<string, ColumnAttribute>();
      PropertyInfo[] props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
      if (props.Length == 0) { throw new Exception("Target type does not have any properties."); }
      foreach (PropertyInfo prop in props)
      {
        object[] columnattributes;
        columnattributes = prop.GetCustomAttributes(typeof(Framework.ColumnAttribute), false);
        if (columnattributes.Length > 0)
        {
          ColumnAttribute col = (ColumnAttribute)columnattributes[0];
          if (col.IsPrimaryKey) { schema._keys.Add(prop.Name, col); }
          schema._cols.Add(prop.Name, col);
          if (col.IsDBGenerated) { schema._isAnyDBGenerated = true; }
          if (col.IsVersion) { schema._versioncolumn = prop.Name; }
          if (col.IsDBGenerated && col.IsPrimaryKey) { schema._identitycolumn = prop.Name; }
        }
      }
      if (schema._cols.Count == 0) { throw new Exception("Target type does not define any data columns."); }
      if (schema._keys.Count == 0) { throw new Exception("Target type does not define any primary key columns."); }
      return schema;
    }

    #endregion
  }
}
